{"ast":null,"code":"export const parallaxSketch = p => {\n  let layers = [];\n  let layerCount = 4; // Number of layers (background, clouds, etc.)\n  let speeds = [0.1, 0.2, 0.3, 0.5]; // Different speeds for each layer\n\n  // Setup each layer with its own speed and elements\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    for (let i = 0; i < layerCount; i++) {\n      layers.push({\n        x: p.random(p.width),\n        y: p.random(p.height),\n        speed: speeds[i],\n        size: p.random(50, 100),\n        // Different sizes for variety\n        elements: []\n      });\n\n      // Create some random elements (e.g., clouds, stars, etc.)\n      for (let j = 0; j < 20; j++) {\n        layers[i].elements.push({\n          x: p.random(p.width),\n          y: p.random(p.height),\n          size: p.random(50, 150)\n        });\n      }\n    }\n  };\n  p.draw = () => {\n    p.clear(); // Clear previous frame for smooth animation\n    p.noStroke();\n\n    // For each layer, move its elements at different speeds based on scroll\n    layers.forEach((layer, index) => {\n      p.fill(255, 108, 180, 120); // Bubble/element color\n\n      layer.elements.forEach(element => {\n        p.circle(element.x, element.y, element.size);\n        element.x += layer.speed;\n\n        // Reset element position when it goes off-screen\n        if (element.x > p.width) {\n          element.x = -element.size;\n          element.y = p.random(p.height);\n        }\n      });\n    });\n  };\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n  };\n};","map":{"version":3,"names":["parallaxSketch","p","layers","layerCount","speeds","setup","createCanvas","windowWidth","windowHeight","i","push","x","random","width","y","height","speed","size","elements","j","draw","clear","noStroke","forEach","layer","index","fill","element","circle","windowResized","resizeCanvas"],"sources":["/home/a/code/repos/SenpaiSuggests/SSCodeBase/client/src/pages/parallaxSketch.js"],"sourcesContent":["export const parallaxSketch = (p) => {\n    let layers = [];\n    let layerCount = 4; // Number of layers (background, clouds, etc.)\n    let speeds = [0.1, 0.2, 0.3, 0.5]; // Different speeds for each layer\n\n    // Setup each layer with its own speed and elements\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight);\n        for (let i = 0; i < layerCount; i++) {\n            layers.push({\n                x: p.random(p.width),\n                y: p.random(p.height),\n                speed: speeds[i],\n                size: p.random(50, 100), // Different sizes for variety\n                elements: []\n            });\n\n            // Create some random elements (e.g., clouds, stars, etc.)\n            for (let j = 0; j < 20; j++) {\n                layers[i].elements.push({\n                    x: p.random(p.width),\n                    y: p.random(p.height),\n                    size: p.random(50, 150),\n                });\n            }\n        }\n    };\n\n    p.draw = () => {\n        p.clear(); // Clear previous frame for smooth animation\n        p.noStroke();\n\n        // For each layer, move its elements at different speeds based on scroll\n        layers.forEach((layer, index) => {\n            p.fill(255, 108, 180, 120); // Bubble/element color\n\n            layer.elements.forEach((element) => {\n                p.circle(element.x, element.y, element.size);\n                element.x += layer.speed;\n\n                // Reset element position when it goes off-screen\n                if (element.x > p.width) {\n                    element.x = -element.size;\n                    element.y = p.random(p.height);\n                }\n            });\n        });\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n    };\n};\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,CAAC,IAAK;EACjC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC;EACpB,IAAIC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEnC;EACAH,CAAC,CAACI,KAAK,GAAG,MAAM;IACZJ,CAAC,CAACK,YAAY,CAACL,CAAC,CAACM,WAAW,EAAEN,CAAC,CAACO,YAAY,CAAC;IAC7C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,UAAU,EAAEM,CAAC,EAAE,EAAE;MACjCP,MAAM,CAACQ,IAAI,CAAC;QACRC,CAAC,EAAEV,CAAC,CAACW,MAAM,CAACX,CAAC,CAACY,KAAK,CAAC;QACpBC,CAAC,EAAEb,CAAC,CAACW,MAAM,CAACX,CAAC,CAACc,MAAM,CAAC;QACrBC,KAAK,EAAEZ,MAAM,CAACK,CAAC,CAAC;QAChBQ,IAAI,EAAEhB,CAAC,CAACW,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC;QAAE;QACzBM,QAAQ,EAAE;MACd,CAAC,CAAC;;MAEF;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACzBjB,MAAM,CAACO,CAAC,CAAC,CAACS,QAAQ,CAACR,IAAI,CAAC;UACpBC,CAAC,EAAEV,CAAC,CAACW,MAAM,CAACX,CAAC,CAACY,KAAK,CAAC;UACpBC,CAAC,EAAEb,CAAC,CAACW,MAAM,CAACX,CAAC,CAACc,MAAM,CAAC;UACrBE,IAAI,EAAEhB,CAAC,CAACW,MAAM,CAAC,EAAE,EAAE,GAAG;QAC1B,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EAEDX,CAAC,CAACmB,IAAI,GAAG,MAAM;IACXnB,CAAC,CAACoB,KAAK,CAAC,CAAC,CAAC,CAAC;IACXpB,CAAC,CAACqB,QAAQ,CAAC,CAAC;;IAEZ;IACApB,MAAM,CAACqB,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC7BxB,CAAC,CAACyB,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;MAE5BF,KAAK,CAACN,QAAQ,CAACK,OAAO,CAAEI,OAAO,IAAK;QAChC1B,CAAC,CAAC2B,MAAM,CAACD,OAAO,CAAChB,CAAC,EAAEgB,OAAO,CAACb,CAAC,EAAEa,OAAO,CAACV,IAAI,CAAC;QAC5CU,OAAO,CAAChB,CAAC,IAAIa,KAAK,CAACR,KAAK;;QAExB;QACA,IAAIW,OAAO,CAAChB,CAAC,GAAGV,CAAC,CAACY,KAAK,EAAE;UACrBc,OAAO,CAAChB,CAAC,GAAG,CAACgB,OAAO,CAACV,IAAI;UACzBU,OAAO,CAACb,CAAC,GAAGb,CAAC,CAACW,MAAM,CAACX,CAAC,CAACc,MAAM,CAAC;QAClC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAEDd,CAAC,CAAC4B,aAAa,GAAG,MAAM;IACpB5B,CAAC,CAAC6B,YAAY,CAAC7B,CAAC,CAACM,WAAW,EAAEN,CAAC,CAACO,YAAY,CAAC;EACjD,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}