{"ast":null,"code":"import p5 from 'p5';\nexport const parallaxSketch = p => {\n  let layers = [];\n  let speed = 0.2;\n  let animeFont;\n  let sections = [];\n  let scrollOffset = 0; // Current scroll position\n  let targetScrollOffset = 0; // Target scroll position for smooth scrolling\n  let maxScroll; // Maximum scroll offset\n  let totalContentHeight; // Total height of the content\n\n  p.preload = () => {\n    animeFont = p.loadFont('/animeFont.ttf');\n  };\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n\n    // Initialize layers\n    for (let i = 0; i < 10; i++) {\n      layers.push({\n        x: p.random(p.width),\n        y: p.random(p.height * 6),\n        // Adjust for total content height\n        size: p.random(50, 200),\n        speed: speed + i * 0.05\n      });\n    }\n\n    // Adjust section positions\n    let sectionSpacing = p.height; // Space between sections\n    let startY = p.height + 200; // Added 200 pixels of extra space below the title\n\n    sections = [{\n      text: \"It's Not the Genre, It's the Journey\",\n      desc: \"We understand the signficance of personalized recommendations\",\n      y: startY\n    }, {\n      text: \"Tell Us Your Journey\",\n      desc: \"Head to search, find some of your favorites, and tell us what you loved!\",\n      y: startY + sectionSpacing\n    }, {\n      text: \"Ask Senpai\",\n      desc: \"Using the Gemini API, Senpai analyzes your list of likes and your input to offer personalized recommendations!\",\n      y: startY + sectionSpacing * 2\n    }, {\n      text: \"The Friends We Made Along the Way\",\n      desc: \"Add anime from Senpai's reccomendations to your wishlist to save for later!\",\n      y: startY + sectionSpacing * 3\n    }, {\n      text: \"Enjoy\",\n      desc: \"Enjoy your new watch list personalized watchlist!\",\n      y: startY + sectionSpacing * 4\n    }, {\n      text: \"\",\n      desc: \"\",\n      y: startY + sectionSpacing * 5\n    }];\n    totalContentHeight = startY + sectionSpacing * (sections.length - 1);\n    maxScroll = totalContentHeight - p.height;\n  };\n  p.draw = () => {\n    p.background(255, 255, 255);\n    p.noStroke();\n\n    // Smooth scrolling implementation\n    let scrollSpeed = 0.1; // Adjust for smoother or faster easing\n    scrollOffset += (targetScrollOffset - scrollOffset) * scrollSpeed;\n\n    // Parallax effect: Moving bubbles\n    layers.forEach(layer => {\n      p.fill(255, 108, 180, 150);\n      let parallaxFactor = layer.speed / 2;\n      let layerY = layer.y - scrollOffset * parallaxFactor;\n\n      // Wrap around vertically\n      if (layerY < -layer.size) {\n        layerY = totalContentHeight + layer.size;\n      } else if (layerY > totalContentHeight + layer.size) {\n        layerY = -layer.size;\n      }\n      p.circle(layer.x, layerY, layer.size);\n      layer.x += layer.speed;\n      if (layer.x > p.width + layer.size) {\n        layer.x = -layer.size;\n      }\n    });\n\n    // Text sections with anime font\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textFont(animeFont);\n\n    // Welcome Message\n    p.textSize(72);\n    p.fill(255, 105, 180);\n    p.text(\"Welcome to Senpai Suggests\", p.width / 2, p.height / 2 - scrollOffset);\n\n    // Display sections\n    sections.forEach(section => {\n      let sectionY = section.y - scrollOffset;\n      // Only draw if within the visible canvas area\n      if (sectionY > -100 && sectionY < p.height + 100) {\n        p.textSize(48);\n        p.text(section.text, p.width / 2, sectionY);\n        p.textSize(24);\n        p.text(section.desc, p.width / 2, sectionY + 40);\n      }\n    });\n  };\n  p.mouseWheel = event => {\n    // Adjust scroll sensitivity\n    let scrollSensitivity = 0.5; // Reduce to make scrolling less sensitive\n    targetScrollOffset += event.delta * scrollSensitivity;\n    // Constrain targetScrollOffset to prevent scrolling beyond content\n    targetScrollOffset = p.constrain(targetScrollOffset, 0, maxScroll);\n    // Prevent default behavior\n    return false;\n  };\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    // Recalculate positions if needed\n  };\n};","map":{"version":3,"names":["p5","parallaxSketch","p","layers","speed","animeFont","sections","scrollOffset","targetScrollOffset","maxScroll","totalContentHeight","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","i","push","x","random","width","y","height","size","sectionSpacing","startY","text","desc","length","draw","background","noStroke","scrollSpeed","forEach","layer","fill","parallaxFactor","layerY","circle","textAlign","CENTER","textFont","textSize","section","sectionY","mouseWheel","event","scrollSensitivity","delta","constrain","windowResized","resizeCanvas"],"sources":["/home/a/code/repos/SenpaiSuggests/SSCodeBase/client/src/pages/parallaxSketch.js"],"sourcesContent":["import p5 from 'p5';\n\nexport const parallaxSketch = (p) => {\n    let layers = [];\n    let speed = 0.2;\n    let animeFont;\n    let sections = [];\n    let scrollOffset = 0; // Current scroll position\n    let targetScrollOffset = 0; // Target scroll position for smooth scrolling\n    let maxScroll; // Maximum scroll offset\n    let totalContentHeight; // Total height of the content\n\n    p.preload = () => {\n        animeFont = p.loadFont('/animeFont.ttf');\n    };\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight);\n\n        // Initialize layers\n        for (let i = 0; i < 10; i++) {\n            layers.push({\n                x: p.random(p.width),\n                y: p.random(p.height * 6), // Adjust for total content height\n                size: p.random(50, 200),\n                speed: speed + i * 0.05\n            });\n        }\n\n        // Adjust section positions\n        let sectionSpacing = p.height; // Space between sections\n        let startY = p.height + 200; // Added 200 pixels of extra space below the title\n\n        sections = [\n            { text: \"It's Not the Genre, It's the Journey\", desc: \"We understand the signficance of personalized recommendations\", y: startY },\n            { text: \"Tell Us Your Journey\", desc: \"Head to search, find some of your favorites, and tell us what you loved!\", y: startY + sectionSpacing },\n            { text: \"Ask Senpai\", desc: \"Using the Gemini API, Senpai analyzes your list of likes and your input to offer personalized recommendations!\", y: startY + sectionSpacing * 2 },\n            { text: \"The Friends We Made Along the Way\", desc: \"Add anime from Senpai's reccomendations to your wishlist to save for later!\", y: startY + sectionSpacing * 3 },\n            { text: \"Enjoy\", desc: \"Enjoy your new watch list personalized watchlist!\", y: startY + sectionSpacing * 4 },\n            { text: \"\", desc: \"\", y: startY + sectionSpacing * 5 }\n        ];\n\n        totalContentHeight = startY + sectionSpacing * (sections.length - 1);\n        maxScroll = totalContentHeight - p.height;\n    };\n\n    p.draw = () => {\n        p.background(255, 255, 255);\n        p.noStroke();\n\n        // Smooth scrolling implementation\n        let scrollSpeed = 0.1; // Adjust for smoother or faster easing\n        scrollOffset += (targetScrollOffset - scrollOffset) * scrollSpeed;\n\n        // Parallax effect: Moving bubbles\n        layers.forEach(layer => {\n            p.fill(255, 108, 180, 150);\n            let parallaxFactor = layer.speed / 2;\n            let layerY = layer.y - scrollOffset * parallaxFactor;\n\n            // Wrap around vertically\n            if (layerY < -layer.size) {\n                layerY = totalContentHeight + layer.size;\n            } else if (layerY > totalContentHeight + layer.size) {\n                layerY = -layer.size;\n            }\n            p.circle(layer.x, layerY, layer.size);\n\n            layer.x += layer.speed;\n            if (layer.x > p.width + layer.size) {\n                layer.x = -layer.size;\n            }\n        });\n\n        // Text sections with anime font\n        p.textAlign(p.CENTER, p.CENTER);\n        p.textFont(animeFont);\n\n        // Welcome Message\n        p.textSize(72);\n        p.fill(255, 105, 180);\n        p.text(\"Welcome to Senpai Suggests\", p.width / 2, p.height / 2 - scrollOffset);\n\n        // Display sections\n        sections.forEach((section) => {\n            let sectionY = section.y - scrollOffset;\n            // Only draw if within the visible canvas area\n            if (sectionY > -100 && sectionY < p.height + 100) {\n                p.textSize(48);\n                p.text(section.text, p.width / 2, sectionY);\n                p.textSize(24);\n                p.text(section.desc, p.width / 2, sectionY + 40);\n            }\n        });\n    };\n\n    p.mouseWheel = (event) => {\n        // Adjust scroll sensitivity\n        let scrollSensitivity = 0.5; // Reduce to make scrolling less sensitive\n        targetScrollOffset += event.delta * scrollSensitivity;\n        // Constrain targetScrollOffset to prevent scrolling beyond content\n        targetScrollOffset = p.constrain(targetScrollOffset, 0, maxScroll);\n        // Prevent default behavior\n        return false;\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n        // Recalculate positions if needed\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}