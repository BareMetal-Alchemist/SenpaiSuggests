{"ast":null,"code":"import p5 from 'p5';\nexport const parallaxSketch = p => {\n  let layers = [];\n  let speed = 0.2;\n  let animeFont;\n  p.preload = () => {\n    animeFont = p.loadFont('/animeFont.ttf');\n  };\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, 3000); // Increase canvas height for scrolling\n    for (let i = 0; i < 10; i++) {\n      layers.push({\n        x: p.random(p.width),\n        y: p.random(p.height),\n        size: p.random(50, 200),\n        speed: speed + i * 0.05\n      });\n    }\n  };\n  p.draw = () => {\n    p.background(0, 0, 0);\n    p.noStroke();\n\n    // Parallax effect\n    layers.forEach(layer => {\n      p.fill(255, 108, 180, 150);\n      p.circle(layer.x, layer.y, layer.size);\n      layer.x += layer.speed;\n      if (layer.x > p.width) {\n        layer.x = -layer.size;\n        layer.y = p.random(p.height);\n      }\n    });\n\n    // Set the anime font\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textSize(72);\n    p.fill(255, 105, 180);\n    p.textFont(animeFont);\n    p.text(\"Welcome to Senpai Suggests\", p.width / 2, p.height / 4);\n\n    // My Likes Section after scrolling\n    if (p.window.scrollY > p.height / 2) {\n      p.textSize(48);\n      p.text(\"My Likes\", p.width / 2, p.height * 0.75); // Adjust position for scrolling effect\n      p.textSize(24);\n      p.text(\"This will take you to the liked animes that you chose!\", p.width / 2, p.height * 0.85); // Adjusted position\n    }\n  };\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, 3000); // Adjust canvas size when window is resized\n  };\n};","map":{"version":3,"names":["p5","parallaxSketch","p","layers","speed","animeFont","preload","loadFont","setup","createCanvas","windowWidth","i","push","x","random","width","y","height","size","draw","background","noStroke","forEach","layer","fill","circle","textAlign","CENTER","textSize","textFont","text","window","scrollY","windowResized","resizeCanvas"],"sources":["/home/a/code/repos/SenpaiSuggests/SSCodeBase/client/src/pages/parallaxSketch.js"],"sourcesContent":["import p5 from 'p5';\n\nexport const parallaxSketch = (p) => {\n    let layers = [];\n    let speed = 0.2;\n    let animeFont;\n\n    p.preload = () => {\n        animeFont = p.loadFont('/animeFont.ttf');\n    };\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, 3000); // Increase canvas height for scrolling\n        for (let i = 0; i < 10; i++) {\n            layers.push({\n                x: p.random(p.width),\n                y: p.random(p.height),\n                size: p.random(50, 200),\n                speed: speed + i * 0.05\n            });\n        }\n    };\n\n    p.draw = () => {\n        p.background(0, 0, 0);\n        p.noStroke();\n\n        // Parallax effect\n        layers.forEach(layer => {\n            p.fill(255, 108, 180, 150);\n            p.circle(layer.x, layer.y, layer.size);\n            layer.x += layer.speed;\n\n            if (layer.x > p.width) {\n                layer.x = -layer.size;\n                layer.y = p.random(p.height);\n            }\n        });\n\n        // Set the anime font\n        p.textAlign(p.CENTER, p.CENTER);\n        p.textSize(72);\n        p.fill(255, 105, 180);\n        p.textFont(animeFont);\n        p.text(\"Welcome to Senpai Suggests\", p.width / 2, p.height / 4);\n\n        // My Likes Section after scrolling\n        if (p.window.scrollY > p.height / 2) {\n            p.textSize(48);\n            p.text(\"My Likes\", p.width / 2, p.height * 0.75); // Adjust position for scrolling effect\n            p.textSize(24);\n            p.text(\"This will take you to the liked animes that you chose!\", p.width / 2, p.height * 0.85); // Adjusted position\n        }\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, 3000); // Adjust canvas size when window is resized\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}