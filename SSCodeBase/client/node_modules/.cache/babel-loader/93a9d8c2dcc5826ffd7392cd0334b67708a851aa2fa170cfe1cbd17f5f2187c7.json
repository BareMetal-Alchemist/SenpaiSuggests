{"ast":null,"code":"var _jsxFileName = \"/home/a/code/repos/SenpaiSuggests/SSCodeBase/client/src/pages/SignupPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './SignupPage.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignupPage = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [entryTemplate, setEntryTemplate] = useState('');\n\n  // Array of humorous Death Note entries with placeholders\n  const entries = [\"The human known as {username} will meet their fate by {password}.\", \"At exactly noon, {username} will accidentally reveal their secret password '{password}' to an audience of ducks.\", \"{username} will be struck by a runaway shopping cart while yelling '{password}'!\", \"{username} shall vanish mysteriously while attempting to type '{password}' on a vintage typewriter.\", \"During karaoke, {username} will belt out '{password}' and be transported to a parallel universe where everyone speaks in haikus.\"];\n\n  // Function to randomly select a template\n  const updateEntryTemplate = () => {\n    const randomTemplate = entries[Math.floor(Math.random() * entries.length)];\n    setEntryTemplate(randomTemplate);\n  };\n  useEffect(() => {\n    updateEntryTemplate(); // Set a random template on component mount\n  }, []);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5000/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const result = await response.json();\n      alert(result.message);\n    } catch (error) {\n      console.error('Error:', error);\n      alert('An error occurred. Please try again.');\n    }\n  };\n\n  // Replace placeholders with username and password input values\n  const displayedEntry = entryTemplate.replace(\"{username}\", username || \"Username\").replace(\"{password}\", password || \"Password\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.signupPage,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.deathNoteRules,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Death Note Rules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"1. The human whose name is written in this note shall die...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"2. This note will not take effect unless the writer has the person's face in mind...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.signInForm,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"entry\",\n          children: displayedEntry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Confirm Entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(SignupPage, \"Eu6XKAZO0m3/4pvxJndjJmOs0l8=\");\n_c = SignupPage;\nexport default SignupPage;\nvar _c;\n$RefreshReg$(_c, \"SignupPage\");","map":{"version":3,"names":["React","useState","useEffect","styles","jsxDEV","_jsxDEV","SignupPage","_s","username","setUsername","password","setPassword","entryTemplate","setEntryTemplate","entries","updateEntryTemplate","randomTemplate","Math","floor","random","length","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","result","json","alert","message","error","console","displayedEntry","replace","className","signupPage","children","deathNoteRules","fileName","_jsxFileName","lineNumber","columnNumber","signInForm","onSubmit","id","type","placeholder","value","onChange","e","target","required","_c","$RefreshReg$"],"sources":["/home/a/code/repos/SenpaiSuggests/SSCodeBase/client/src/pages/SignupPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './SignupPage.module.css';\n\nconst SignupPage = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [entryTemplate, setEntryTemplate] = useState('');\n\n  // Array of humorous Death Note entries with placeholders\n  const entries = [\n    \"The human known as {username} will meet their fate by {password}.\",\n    \"At exactly noon, {username} will accidentally reveal their secret password '{password}' to an audience of ducks.\",\n    \"{username} will be struck by a runaway shopping cart while yelling '{password}'!\",\n    \"{username} shall vanish mysteriously while attempting to type '{password}' on a vintage typewriter.\",\n    \"During karaoke, {username} will belt out '{password}' and be transported to a parallel universe where everyone speaks in haikus.\"\n  ];\n\n  // Function to randomly select a template\n  const updateEntryTemplate = () => {\n    const randomTemplate = entries[Math.floor(Math.random() * entries.length)];\n    setEntryTemplate(randomTemplate);\n  };\n\n  useEffect(() => {\n    updateEntryTemplate(); // Set a random template on component mount\n  }, []);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5000/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n      });\n      const result = await response.json();\n      alert(result.message);\n    } catch (error) {\n      console.error('Error:', error);\n      alert('An error occurred. Please try again.');\n    }\n  };\n\n  // Replace placeholders with username and password input values\n  const displayedEntry = entryTemplate\n    .replace(\"{username}\", username || \"Username\")\n    .replace(\"{password}\", password || \"Password\");\n\n  return (\n    <div className={styles.signupPage}>\n      <div className={styles.deathNoteRules}>\n        <h2>Death Note Rules</h2>\n        <p>1. The human whose name is written in this note shall die...</p>\n        <p>2. This note will not take effect unless the writer has the person's face in mind...</p>\n        {/* Additional rules can be added here */}\n      </div>\n\n      <div className={styles.signInForm}>\n        <h2>Sign Up</h2>\n        <form onSubmit={handleSubmit}>\n          <p id=\"entry\">{displayedEntry}</p>\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n          <button type=\"submit\">Confirm Entry</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignupPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}