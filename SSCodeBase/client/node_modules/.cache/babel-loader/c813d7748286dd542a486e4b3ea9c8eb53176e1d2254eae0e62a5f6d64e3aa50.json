{"ast":null,"code":"import p5 from 'p5';\nexport const parallaxSketch = p => {\n  let layers = [];\n  let speed = 0.2;\n  let animeFont;\n  p.preload = () => {\n    animeFont = p.loadFont('/animeFont.ttf');\n  };\n  p.setup = () => {\n    p.createCanvas(p.windowWidth, p.windowHeight * 2); // Adjust for dynamic scrolling\n    for (let i = 0; i < 10; i++) {\n      layers.push({\n        x: p.random(p.width),\n        y: p.random(p.height),\n        size: p.random(50, 150),\n        speed: speed + i * 0.05\n      });\n    }\n  };\n  p.draw = () => {\n    p.clear(); // Clear canvas for smooth rendering\n    p.background(255); // White background\n    p.noStroke();\n\n    // Render parallax bubbles\n    layers.forEach(layer => {\n      p.fill(255, 108, 180, 150);\n      p.circle(layer.x, layer.y, layer.size);\n      layer.x += layer.speed;\n      if (layer.x > p.width) {\n        layer.x = -layer.size;\n        layer.y = p.random(p.height);\n      }\n    });\n\n    // Display titles and descriptions\n    const sections = [{\n      text: \"My Likes\",\n      desc: \"Explore your liked animes!\",\n      offset: p.height * 0.3\n    }, {\n      text: \"My Wishlist\",\n      desc: \"Save animes you want to watch.\",\n      offset: p.height * 0.6\n    }, {\n      text: \"I'm Feeling Lucky\",\n      desc: \"Get a random anime recommendation!\",\n      offset: p.height * 0.9\n    }, {\n      text: \"Ask SenpAI\",\n      desc: \"AI-powered recommendations!\",\n      offset: p.height * 1.2\n    }, {\n      text: \"About Us\",\n      desc: \"Meet the creators of Senpai Suggests.\",\n      offset: p.height * 1.5\n    }];\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textFont(animeFont);\n    sections.forEach(section => {\n      const yPos = section.offset - window.scrollY;\n      if (yPos > -p.height && yPos < p.height) {\n        // Title\n        p.textSize(48);\n        p.fill(255, 105, 180);\n        p.text(section.text, p.width / 2, yPos);\n\n        // Description\n        p.textSize(24);\n        p.fill(50);\n        p.text(section.desc, p.width / 2, yPos + 40);\n      }\n    });\n  };\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight * 2); // Adjust to fit the viewport\n  };\n};","map":{"version":3,"names":["p5","parallaxSketch","p","layers","speed","animeFont","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","i","push","x","random","width","y","height","size","draw","clear","background","noStroke","forEach","layer","fill","circle","sections","text","desc","offset","textAlign","CENTER","textFont","section","yPos","window","scrollY","textSize","windowResized","resizeCanvas"],"sources":["/home/a/code/repos/SenpaiSuggests/SSCodeBase/client/src/pages/parallaxSketch.js"],"sourcesContent":["import p5 from 'p5';\n\nexport const parallaxSketch = (p) => {\n    let layers = [];\n    let speed = 0.2;\n    let animeFont;\n\n    p.preload = () => {\n        animeFont = p.loadFont('/animeFont.ttf');\n    };\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight * 2); // Adjust for dynamic scrolling\n        for (let i = 0; i < 10; i++) {\n            layers.push({\n                x: p.random(p.width),\n                y: p.random(p.height),\n                size: p.random(50, 150),\n                speed: speed + i * 0.05\n            });\n        }\n    };\n\n    p.draw = () => {\n        p.clear(); // Clear canvas for smooth rendering\n        p.background(255); // White background\n        p.noStroke();\n\n        // Render parallax bubbles\n        layers.forEach(layer => {\n            p.fill(255, 108, 180, 150);\n            p.circle(layer.x, layer.y, layer.size);\n            layer.x += layer.speed;\n            if (layer.x > p.width) {\n                layer.x = -layer.size;\n                layer.y = p.random(p.height);\n            }\n        });\n\n        // Display titles and descriptions\n        const sections = [\n            { text: \"My Likes\", desc: \"Explore your liked animes!\", offset: p.height * 0.3 },\n            { text: \"My Wishlist\", desc: \"Save animes you want to watch.\", offset: p.height * 0.6 },\n            { text: \"I'm Feeling Lucky\", desc: \"Get a random anime recommendation!\", offset: p.height * 0.9 },\n            { text: \"Ask SenpAI\", desc: \"AI-powered recommendations!\", offset: p.height * 1.2 },\n            { text: \"About Us\", desc: \"Meet the creators of Senpai Suggests.\", offset: p.height * 1.5 },\n        ];\n\n        p.textAlign(p.CENTER, p.CENTER);\n        p.textFont(animeFont);\n\n        sections.forEach(section => {\n            const yPos = section.offset - window.scrollY;\n            if (yPos > -p.height && yPos < p.height) {\n                // Title\n                p.textSize(48);\n                p.fill(255, 105, 180);\n                p.text(section.text, p.width / 2, yPos);\n\n                // Description\n                p.textSize(24);\n                p.fill(50);\n                p.text(section.desc, p.width / 2, yPos + 40);\n            }\n        });\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight * 2); // Adjust to fit the viewport\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}